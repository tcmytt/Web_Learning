1. Selector chọn phần tử trong CSS
-  Có nhiều phần tử <p> nhưng chỉ phần tử nào có class là thongtin mới áp dụng CSS :
p.thongtin {
    background: lightskyblue;
    text-align: center;
}

- Áp dụng cho thẻ p có class là thongtin bạn cũng muốn áp dụng cho thẻ <div> có class là infomation :
p.thongtin, div.infomation {

}

- Để chọn tất cả (mọi) phần tử HTML dùng ký hiệu sao * :
* {

}

- Chọn theo tên thẻ phần tử HTML div, span, p, strong, a, img ... :
a {

}

- Chọn theo class và id của phần tử HTML :
.gioithieu {

}

/* Phần tử có id là username */
#username {

}

- Chọn theo thuộc tính phần tử HTML :
Một phần tử HTML khi viết nó có các thuộc tính ngoài thuộc tính id và class (hai thuộc này cách chọn đã nói ở trên), 
có các thuộc tính thuộc về đặc tính phần tử như img có thuộc tính src, a có thuộc tính href, target ... 
có các thuộc tính tên bất kỳ do bạn thêm vào như mydata, abc ...
Trong CSS hoàn toàn có thể chọn ra phần tử HTML căn cứ theo thuộc tính đó có hay không, hoặc thuộc tính đó có giá trị là gì, giả sử thuộc tính là attrName :

+ Chọn phần tử có thuộc tính attrName (không cần quan tâm giá trị thuộc tính) :
[attrName] {
    font-weight: bold;
}

+ Chọn phần tử có thuộc tính attrName chỉ có một giá trị (chính xác) :
[type="email"] {
    font-weight: bold;
}

+ Chọn phần tử có thuộc tính attrName và trong các giá trị của nó có một là value (một số thuộc tính có thể viết nhiều giá trị cách nhau bởi space như class="class1 class2") 
[attrName~=value] {

}

+ Chọn phần tử có thuộc tính attrName và trong chuỗi giá trị có chuỗi con value
[attrName*=value] {

}

+ Chọn phần tử có thuộc tính attrName và giá trị có tiền tố là value.
/* Chọn các phần có thuộc tình href bắt đầu bằng https://abc.com */
[href^="https://abc.com"] {
    font-weight: bold;
}

+ Chọn phần tử có thuộc tính attrName và giá trị có hậu tố là value.
[attrName$=value] {

}

- Kết hợp các selector :
+ Chọn phần tử con :
/* chọn phần tử a có class là linkout, a phải là con của p, p đó phải là con của
    phần từ có class là .cardinfo */
.cardinfo > p > a .linkout {
    ...
}

+ Chọn phần tử cùng cha phía sau :
Dấu cộng + để kết hợp 2 selector nếu phần các phần tử thứ (2) nằm ngay sau phần tử thứ nhất (1), đồng thời (1) và (2) cùng cha thì các phần từ (2) được chọn.
/* chọn các phần tử span nằm ngay sau strong, cùng cha với strong */
strong + span {
    color: red;
}

+ Chọn tất cả phần tử cùng cha phía sau :
Sử dụng dấu ~ để kết hợp 2 selector nếu phần các phần tử thứ (2) nằm sau phần tử thứ nhất (1), đồng thời (1) và (2) cùng cha thì các phần từ (2) được chọn.
strong ~ span {
    color: red;
}

-> selector1 + selector2 chọn phần tử select2 liền ngay phía sau, còn selector1 ~ selector2 chọn tất cả các phần tử select2 phía sau.

+ Chọn các phần tử con, cháu ... (hậu duệ) : selector2 bên trong selector1
selector1 selector2 {
    ...
}

2. Thuộc tính text-transform trong CSS
text-transform: none | capitalize | uppercase | lowercase | full-width;
none : Tắt các tác dụng chuyển đổi
capitalize : Mỗi chữ đầu tiên của từ được chuyển thành in hoa
uppercase : Tất cả các chữ chuyển thành in hoa
lowercase : Tất cả các chữ chuyển thành in thường

3. Đổ bóng text-shadow trong CSS
text-shadow: x y br color;
x giá trị chiều dài đầu tiên, là khoảng cách theo chiều ngang (bóng chữ dịch ngang)
y giá trị chiều dài thứ hai, là khoảng cách theo chiều đứng
br bán kính mờ (tô mờ đường biên), tham số này tuỳ chọn, nếu thiếu thì bán kính mờ bằng 0, nút chữ bóng mờ sắc nét nhất.

4. Thuộc tính text-decoration và text-indent CSS
- text-decoration dạng viết tổng hợp của 
+ text-decoration-line : thiết lập có đường kẻ qua chữ, nó có thể nhận các giá trị
    none : hủy kẻ qua chữ
    underline: gạch chân, gạch dưới css
    overline: gạch trên đầu chữ
    line-through: gạch qua chữ
+ text-decoration-color : Đặt màu đường trang trí mà loại đường thì thiết lập ở text-decoration-line, nó nhận giá trị là các mã màu CSS
+ text-decoration-style : thuộc tính thiết lập kiểu đường trang trí, nhận các giá trị 
    solid : đường liền
    double: đường đôi
    dotted: đường chấm chấm
    dashed: đường gạch gạch
    wavy: lượn sóng

Bằng cách dùng text-decoration bạn có thể viết gộp ba thuộc tính trên cùng một dòng, với cú pháp dạng:
text-decoration: line color style;

- text-indent : chỉ ra khoảng thụt đầu dòng (chiều ngang) của văn bản. 
text-indent: 100px; 

4. Căn lề text-align và vertical-align trong CSS
- Thuộc tính text-align để căn chỉnh vị trí của chữ hoặc các phần tử dạng inline theo chiều ngang trong phần tử HTML chứa dạng block 
Mặc định là căn lề trái, tuy nhiên bạn có thể chỉ ra các giá trị:
    left hoặc start: căn lề trái
    right hoặc end: căn lề phải
    center: căn giữa
    justify: dãn đều chữ
Chú ý: text-align chỉ áp dụng cho phần tử dạng khối block như <p> <div> <p> <h1> <table> ... và các phần tử bên trong nếu phần tử đó là dạng inline như <span> <a> <img> ... 
Tham khảo thêm: phần tử html dạng block và inline. Cũng lưu ý nếu bên phần tử chứa có phần tử dạng block, phần tử này không có thuộc tính text-align riêng, thì nó sẽ kế thừa từ phần tử cha thuộc tính này.

- Thuộc tính vertical-align dùng để căn chỉnh theo chiều đứng của phần các phần tử dạng inline, inline-block đứng cạnh nhau trong một hàng trên xuống (đường). 
phần tử <td> (ô bảng) với giá trị nhận phổ biến là top, middle, bottom
    top căn mép trên
    middle căn giữa
    bottom căn mép dưới
    baseline căn theo đường cơ sở
    sub chữ thụt xuống
    sup chữ nhô lên
    10px, 10pt, 10cm lệch lên một giá trị (âm thì xuống)

Thuộc tính vertical-align muốn áp dụng cho các phần tử dạng block thì cần chuyển nó về dạng inline, inline-block. 
Ví dụ như trong thẻ div có thể cần thêm các thuộc tính để nó làm việc chính xác: ví dụ: display: inline-table; và display: table-cell;

5. Thuộc tính 
- Giãn dòng với thuộc tính line-height trong CSS 
line-height: normal | number | length | percentage | inherit

- Thuộc tính word-spacing thiết lập khoảng cách giữa các từ của văn bản text, hoặc giữa các phần tử HTML, nó nhận giá trị chiều dài hoặc normal.
word-spacing: normal | length | inherit

- Thuộc tính letter-spacing thiết lập khoảng cách giữa các ký tự trong từ (khoảng cách giữa các ký tự cạnh nhau).
letter-spacing: normal | length | inherit

- Thuộc tính white-space định dạng khoảng trắng trong CSS
white-space : 

6. Thuộc tính list-style-type thiết lập kiểu danh sách trong CSS
Thuộc tính list-style là dạng kết hợp của cả ba thuộc tính list-style-type list-style-image list-style-position. 

list-style: list-style-type list-style-position list-style-image

ul {
   list-style: square outside none;
}

7. Định dạng liên kết <a> bằng CSS
Sử dụng pseudo selector :link, :visited, :active, :hover để để định dạng cách hiện thị các link (thẻ <a>) bằng CSS. 
    a:link - kiểu bình thường khi link chưa từng được bấm vào (mặc định chữ xanh, có gạch chân)
    a:visited - kiểu hiện thị khi link đã từng được truy cập
    a:active - hiện thị khi chuột bấm vào (trước khi nhả)
    a:hover - hiện thị khi chuột phía trên link
    a:focus - hiện thị khi đang nhận input (khi tab dịch đến liên kết).

Mặc định các link có dòng kẻ phía dưới dòng text của link. Nếu bạn muốn loại bỏ nó thì dùng CSS cho link: text-decoration: none;

8. Các đơn vị px em rem mm đo độ dài trong CSS
Đơn vị kích thước tuyệt đối trong CSS :
    cm	centimet (dài bằng 1/100 m)
    mm	milimét (dài bằng 1/1000 m)
    in	Inche: 1in = 2.54cm = 96px
    px	Điểm ảnh (10px là 10 điểm ảnh màn hình)
    pt	Điểm (point), đây là đơn vị phổ biến dùng biểu diễn kích thước font chữ (72pt = 1inch = 25.4mm) hay 1pt = (1/72)in

Đơn vị kích thước tương đối trong CSS :
em	Bằng cỡ font của phần tử cha. Có nghĩa phần tử cha có cỡ (font-size) là 14px, thì 1em là 14px - nếu cỡ font phần tử cha là 10pt thì 2em là 20px.
rem	Bằng cỡ font của phần tử gốc - root, trong CSS để thiết lập các thuộc tính của root thì dùng ký hiệu :root, rồi định nghĩa các thuộc tính giống class:
:root {
    font-size: 16px;
    color: #333;
}
lh	Bằng chiều cao dòng phần tử cha
vw	Bằng 1% chiều rộng cửa sổ
vh	Bằng 1% chiều cao cửa sổ

9. Thuộc tính box-sizing
box-sizing: border-box;
khi thiết lập thuộc tính width và height của phần tử CSS có nghĩa là thiết lập chiều rộng và cao cho vùng nội dung

10.Đường viền border CSS
border: size style color;
style : giá trị : none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset, hay dùng kiểu dotted - đường nét chấm chấm, dashed đường nét đứt, solid đường nét liền

11. Thuộc tính border-radius trong CSS
border-radius: [radius value] [radius value]? [radius value]? [radius value]?;
+ dấu ? là tùy chọn (có thể không có)

VD: border-radius: 10px 20px 30px 40px;
Bán kính bo tròn góc theo tứ tự là các góc: trên trái (10px), trên phải (20px), dưới phải (30px), dưới trái (40px)

border-radius: 10px;
Bán kính bo tròn cả 4 góc đều bằng nhau (10px)

12. Thuộc tính margin trong CSS
margin: 15px; 
margin: 5px 10px 15px 20px; //  top, right, bottom, left
Giá trị bằng auto thường được dùng để căn chỉnh phần tử nằm giữa phần tử chứa (khi margin-left và margin-right có giá trị auto).

13. Kích thước rộng cao phần tử HTML trong CSS
-  width, height, min-width, min-height, max-width, max-height
Nếu box-sizing có giá trị border-box:
Thì thuộc tính width và height là tổng chiều rộng và tổng cao của phần tử (gồm content, padding, border, margin).

Nếu box-sizing có giá trị content-box:
Thì thuộc tính width và height là chiều rộng và cao của riêng phần content (không gồm padding, border, margin).

14. Thuộc tính display trong CSS
display : inline, inline-block, block, list-item ,none .

+ inline : có thể thiết lập có padding, margin nhưng không thiết lập được width và height (dù có thiết lập thì cũng không tác dụng gì). 
Cũng chú ý, padding và margin nếu thiết lập nó sẽ đẩy các phần tử khác giãn ra theo chiều ngang và không tác dụng đẩy các phần tử theo chiều đứng.

+ inline-block : giống dạng inline, tuy nhiên cho phép thiết lập chiều rộng và cao phần content, nó đẩy giãn các phần tử ngang, dọc phù hợp với kích thước của nó

+ block : không đứng cùng hàng với phần tử khác, nó ngắt dòng để tạo dòng mới và chiều ngang mở rộng tối đa có thể (tối đa theo kích thước phần tử chứa). 
Phần tử block có thể thiết lập chiều rộng, cao cho nó. 
Hãy chú ý nguyên tắc: phần tử block có thể chứa phần tử block khác, chứa phần tử inline, block-inline. 
Còn phần tử inline thì không nên chứa block (có một số ngoại lệ như phần tử <a>). Phần tử mặc định đã là block như: <p> <ul> <h1> ...

+ none : Phần tử sẽ bị ẩn đi, bị loại bỏ hoàn toàn khỏi hiện thị của trang, trình duyệt không dựng nội dung phần tử - mà sẽ có nó như không có. 
Thuộc tính này hữu ích khi sử dụng với Javascript hoặc viết CSS responsive (ẩn/hiện tùy thuộc vào kích cỡ màn hình).

+ list-item : Cho biết sẽ tạo ra phần tử dạng danh sách (tương tự phần tử <li> trong HTML).
VD :<p class="list-exam">
    <span class="item-exam">Phần tử 1</span>
    <span class="item-exam">Phần tử 2</span>
    <span class="item-exam">Phần tử 3</span>
</p>

15. Thuộc tính visibility trong CSS
- Phần tử bị ẩn hidden nhưng không gian chiếm chỗ của nó vẫn hiệu lực.
visibility: visible | hidden | collapse | inherit

+ visible : Đây là giá trị mặc định, các phần tử khởi đầu sẽ là hiện thị trong trang

+ hidden : Không hiện thị phần tử (phần tử là trong suốt) nhưng không loại bỏ phần tử khỏi luồng dàn phần tử của trang. 
Không gian chiếm chỗ bởi phẩn tử vẫn để dành cho nó như là nó đang hiện thị.
Note : Nếu ẩn phần tử bằng display: none; thì phần tử đó bị loại khỏi luồng dàn trang phần tử (phần tử như là không có - do vậy nó không hề chiếm chỗ trong trang).

+ collapse : Nếu visibility có giá trị collapse thì phần tử bị ẩn, nhưng ứng sử có khác nhau tùy vào loại phần tử
Với các hàng, cột trong bảng <table> thì nó ẩn phần tử - và không gian chiếm chỗ bị thu hồi (giống display: none).
Sử dụng cho các mục của FlexBox , thì nó ẩn phần tử - và không gian chiếm chỗ bị thu hồi
Các trường hợp khác ứng xử giống giá trị hidden

    CÓ THỂ DÙNG 1 TỪ background CHO TẤT CẢ CÁC THUỘC TÍNH VỀ background

15. Màu nền background-color anh nền background-image với CSS 
background-color : color ;

background-image: image | none ;
+ none : thiết lập không có ảnh nền cho phần tử
+ image: là ảnh làm nền, thường dùng hàm url(địa-chỉ-url-ảnh) hoặc hàm linear-gradient hay hàm radial-gradient

background-repeat : valuex valuey;
Trong đó: valuex và valuey là kiểu lặp lại theo chiều x và y có thể nhận
repeat - lặp lại (ảnh có thể bị cắt tại biên của box)
space - lặp lại - dàn ảnh có khoảng cách sao cho ảnh không bị cắt tại biên
round - lặp lại - ảnh có thể bị thu phóng để không bị cắt tại biên
no-repeat - không lặp lại

background-attachment : fixed nền không cuộn theo phần tử (cố định với biên trang), scroll trôi theo phần tử (nền cố định với biên phần tử), local nền cuộn theo content của phần tử.

16. Thiết lập nền background-size background-clip CSS
- background-size: width height; điều chỉnh kích thước của các ảnh làm nền

+ background-size: 100px auto;
auto: Nếu nhận một giá trị auto, còn giá trị kia chỉ rõ. Thì chiều ảnh có giá trị auto tự động tính toán theo tỷ lệ ban đầu của ảnh. Ví dụ: Chiều rộng thu về 100px, chiều cao điều chỉnh sao cho đúng tỷ lệ ảnh ban đầu

+ background-size: contain;
Trường hợp viết cú pháp như trên, ảnh sẽ thu phóng sao toàn bộ ảnh đặt vừa lọt trong vào khu vực nền của phần tử.

+ background-size: cover;
Ảnh nền sẽ thu/phóng sao cho phủ kín hết toàn bộ nền.

- background-position: px py; thiết lập vị trí của ảnh nền trong hệ tọa độ của phần tử.
Trong đó px py là tọa độ góc thứ nhất nhất của ảnh nó có thể nhận các giá trị: top, left, bottom, right, center, chiều dài, phần trăm

- background-clip : chỉ ra vùng vẽ của nền
border-box mặc định, nền vẽ ngoài biên viền.
padding-box nền vẽ cả ở vùng padding (không viền)
content-box nền chỉ vẽ ở vùng nội dung phần tử

- background-origin : thiết lập gốc xác định ảnh nền
Nhận các giá trị: padding-box, border-box, content-box

17. overflow
- Thuộc tính overflow trong CSS
Thuộc tính overflow để điều khiển khi nội dung phần tử HTML vượt quá kích thước box, có thể ẩn đi nội dung vượt quá hoặc cuộn nội dung. 
Thay đổi ứng sử khi tràn nội dung theo chiều ngang dùng thuộc tính overflow-x, chiều đứng overflow-y

overflow: visible | hidden | scroll | auto | inherit;

+ visible : Mặc định. Khi nội dung bị tràn, nó không bị cắt xén, nó vẫn được trình duyệt render (dựng, vẽ) vượt ra khỏi phạm vi box (có thể dẫn tới nó nằm đề nên các phần tử khác).
+ hidden : Cho biết những nội dung bị tràn vượt khỏi box sẽ bị cắt bỏ (không xuất hiện thanh cuộn scroll).
+ auto : Khi thiết lập overflow có giá trị auto thi ứng sử tùy thuộc vào loại trình duyệt, nhưng hầu hết sẽ xuất hiện thanh cuộn để cuộn nội dung bị tràn (nếu vượt chiều đứng xuất hiện thanh cuộn đứng, vượt chiều ngang xuất hiện thanh cuộn ngang hoặc cả hai khi vượt kích thước cả ngang cả dọc).
+ croll : Tương tự như nhận giá trị auto, tuy nhiên phần tử luôn để dành chỗ để xuất hiện thanh scroll (kể cả khi nội dung chưa bị tràn).
+ inherit : Thuộc tính overflow kế thừa từ phần tử chứa nó.

- Thuộc tính overflow-x và overflow-y trong CSS :
Trong trường hợp bạn muốn thiết lập riêng rẽ ứng sử ra sao khi tràn theo chiều trang thì dùng thuộc tính overflow-x còn theo chiều đứng là overflow-y
overflow-x: visible | hidden | scroll | auto | inherit;
overflow-y: visible | hidden | scroll | auto | inherit;
Các giá trị visible, hidden, scroll, auto ý nghĩa của nó như phần trên.

18. Thuộc tính text-overflow trong CSS
Sử dụng text-overflow để thiết lập ứng sử khi dòng chữ dài vượt qua kích thước rộng của phần tử chứa như thiết lập cắt bỏ nội dung tràn, thiết lập cho thêm dâu ba chấm ...
Thuộc tính text-overflow để thiết lập khi dòng text dài vượt quá chiều rộng phần tử do :
(Thiết lập thuộc tính white-space có giá trị nowrap và thiết lập tràn overflow là hidden)

text-overflow: clip | ellipsis ;

+ clip : Mặc định, khi nó nội dung dòng text bị tràn sẽ bị cắt bỏ không hiện thị.
+ ellipsis : nội dung tràn bị ẩn và tự thêm vào dấu ba chấm ...

VD :
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;

19. Thuộc tính float trong CSS
Thuộc tính này sẽ đẩy phần tử trôi về trái hoặc phải của phẩn tử chứa.
float: left | right | none | inherit;

+ left: phần tử được trôi về phía bên trái. Luồng nội dung thông thường sẽ giữ ở bên phải, bắt đầu ở phần đỉnh của phần tử. Luồng nội dung xung quanh box thay đổi tùy thuộc vào giá trị của thuộc tính clear .
+ left: phần tử được trôi về phía bên phải
+ none: phần tử không bị đẩy về phía nào, vị trí của nó theo luồng dựng thông thường.
+ inherit: giá trị float kế thừa từ phần tử cha.

Khi một phần tử là float (right hoặc left), thì chiều cao phần tử chứa nó thu gọn sao cho vừa các nội dung còn lại (không float),
chiều cao phần tử float không tác động gì trong tính toán chiều cao phần tử chứa. 

- Kỹ thuật với clear để loại bỏ ảnh hưởng float đến chiều cao :
.clearfix {
    clear: both;
}
 Đưa vào ngang hàng với phần tử float nó sẽ cho lớp cha bao hết lớp con float lại

- Kỹ thuật với :after để loại bỏ ảnh hưởng float đến chiều cao
Kỹ thuật này là đưa thuộc tính clear vào chính thành phần của phần tử chứa(Phần tử cha), đó là pseudo :after, 
lúc đó bạn không phải chèn thêm phần tử vào phần tử chứa, mà bản thân phần tử chứa sẽ tự sinh ra ở cuối thành phần :after có thuộc tính clear.
.clearafter:after {
    content: ".";
    visibility: hidden;
    display: block;
    height: 0;
    clear: both;
}

20. Thuộc tính clear trong CSS
Thuộc tính được sử dụng để xóa bỏ ảnh hướng của float trên cạnh trái, cạnh phải hoặc cả hai của box phần tử,
clear: none | left | right | both | inherit
none giá trị mặc định, phần tử giữ ảnh hưởng của float
left bỏ đi ảnh hưởng của float ở biên trái, phần từ phía bên trái sẽ bị dịch xuống dưới
right bỏ đi ảnh hưởng của float ở biên phải
both bỏ đi ảnh hưởng của float ở cả hai biên (phần tử phía sau dịch xuống dưới)

21. Vị trí phần tử position CSS
position: static | relative | absolute | sticky |  fixed

+ position : relative
    .pos_relative {
        position: relative;
        left: 50px;  /* cạnh trái lệch 50 */
        top:  -60px; /* cạnh trên lệch lên 60px */
    }

+ position : absolute
Vị trí phần tử và có thể là kích thước phần tử nữa hoàn được xác định bởi các thuộc tính top, left, right, bottom so với phần tử cha (hoặc tổ tiên gần nhất) có thuộc tính postion là relative. 
Nếu ngược hết DOM không có phần tử tổ tiên nào có postion relative thì vị trí là tương ứng với cửa sổ trình duyệt.

+ position : fixed
Ý nghĩa tương tự như khi nhận absolute - phần tử cũng bị tách khỏi luồng dàn phần tử thông thường của trình duyệt, 
tuy nhiên vị trí xác định liên hệ với viewport (cửa sổ nhìn hiện tại của trình duyệt, chứ không phải phần tử chứa), 
điều này làm cho vị trí phần tử luôn cố định dù bạn cuộn trình duyệt.

+ position : sticky
Trường hợp này là lai giữa relative và fixed. 
Ví dụ, một giá trị cố định là 50px, nếu vị trí trong viewport (top) trên 50px thì nó ứng sử như relative, nếu nhỏ hơn thì nó sẽ giữ cố định là 50px.

22. Thuộc tính z-index
Thuộc tính z-order là xếp thứ tự phần tử theo trục z. Một phần tử có giá trị z-order cao hơn thì nó sẽ nằm trên (đè lên) phần tử có z-order thấp hơn.
z-index: auto | int

23. Định dạng hiện thị bảng table bằng CSS
table-layout: auto | fixed | inherit

24. Thuộc tính cursor
cursor: cursor-value;
cursor: url("https://cdn-icons-png.flaticon.com/128/3119/3119214.png"), auto;

25. CSS3 Giới thiệu một số tính năng
CSS3 là chuẩn mới nhất cho CSS, nó tương thích với chuẩn CSS cũ, hầu hết các trình duyệt đều hỗ trợ các tính năng mới trong CSS3.
CSS Vendor : Tiền tố CSS vendor là một cách viết CSS cho một loại trình duyệt cụ thể mà nó hỗ trợ các tính năng mới CSS đang trong quá trình kiểm tra, thử nghiệm.
Ví dụ tiền tố cho trình duyệt Safari và Chrome là -webkit
Thuộc tính mới border-radius đã được hỗ trợ trong Chrome, Safari, Mozilla đi kèm với nó là tiền tố trình duyệt.

Ví dụ để sử dụng border-radius thì viết CSS với tiền tố như sau:
 -webkit-border-radius: 24px;

Sử dụng tiền tố trước các thuộc tính mới nhằm đảm bảo nó làm việc trên các trình duyệt không được hỗ trợ. 
Như vậy có thể bạn phải định nghĩa nhiều thuộc tính để trang web làm việc như nhau trên nhiều trình duyệt khác nhau.

Danh sách tiền tố Browser
-moz- (Firefox)
-o- (Opera)
-ms- (Internet Explorer)
-webkit- (Safari, Chrome)
Bạn cần liên tục cập nhật các thông tin về trình duyệt, khi một trình duyệt hỗ trợ theo đúng chuẩn một thuộc tính nào đó thì bạn có thể loại bỏ tiền tố viết riêng cho trình duyệt đó.

26. Tô bóng box với thuộc tính box-shadow CSS3
box-shadow: none;   /* không tô bóng box */
box-shadow: offset-x offset-y blur-radius? spread-radius? color?;
box-shadow: inset offset-x offset-y blur-radius? spread-radius? color?;

Trong đó tham số có dấu ? là tùy chọn, có thể không thiết lập. Ý nghĩa của các tham số:
offset-x: khoảng dịch đổ bóng chiều x
offset-y: khoảng dịch đổ bóng chiều y
blur-radius: bán kính mờ
spread-radius: bán kính mở rộng
color: màu đổ bóng
inset: bóng sẽ tô trong box

27. Màu sắc có hiệu ứng trong suốt rgba hsla CSS3
- rgba(red, green, blue, alpha)
Giá trị tham số alpha nhận giá trị từ 0.0 (trong suốt hoàn toàn) đên 1.0 (không có hiệu ứng trong suốt).
VD :color: rgba(156, 39, 176, 0.57);

- Màu HSL tạo ra bằng CSS với cú pháp hsl(hue, saturation, lightness), trong đó:
Hue là độ của màu trong vòng tròn màu có giá trị từ 0 đến 360. Nhứ 0 (màu đỏ), 240 (xanh), 120 (xanh lá cây)
Saturation giá trị theo phần trăm, là cường độ màu
lightness độ sáng của màu theo phần trăm 0 (tối) và 100 là sáng trắng
VD : color: hsl(291, 50%, 35%);

- Màu hsla(hue, saturation, lightness, alpha) 

28. Lựa chọn theo pseudo class trong CSS
Một pseudo-classe thêm vào selector bằng cách viết dấu hai chấm : sau đó là tên (từ khóa) trạng thái.
để cho biết mã CSS sẽ áp dụng vào phần tử khi phần tử ở trạng thái nào đó của phần tử HTML (đang focus nhập dữ liệu, bị vô hiệu, đang có chuột ở trên ...). 

:active	
a:active { ... }
Chọn khi phần tử active (giai đoạn thẻ a từ nhấn chuột đến trước nhả chuột)

:hover	
a:hover { ... }
Chọn phần tử a mà chuột ở phía trên

:focus	
input:focus { ... }
Chọn phần tử đang là focus (đang nhận nhập liệu từ người dùng).

:visited	
a:visited { ... }
Chọn các thẻ a và đã từng truy cập (có trong lịch sử truy cập của trình duyệt).

:checked	
input[type="checkbox"]:checked
{
    ...
}
Điều khiển Radio (<input type="radio">), CheckBox (<input type="checkbox">) như đã biết (xem thẻ HTML <input>) người dùng có thể chuyển trạng thái của nó (chọn/không chọn). Khi người dùng chọn thì nó ở trạng thái checked

:enabled	
input[type="submit"]:enabled
{
    color: green;
}
Chọn các phần tử trạng thái enabled (có thể nhận tương tác của người dùng), chủ yếu áp dụng các phần tử control trong FORM

:disabled	
textarea:disabled { ... }
Chọn khi phần tử bị vô hiệu. Các phần tử khi bị vô hiệu không tiếp nhận tương tác của người dùng thì nó ở trạng thái disabled, đặc biệt là các phần tử control như <input>, <textarea>, <button>, <select>

:empty	
p:empty { ... }
chọn các phần tử <p> không chứa phần tử con nào, không có text

:link	
a:link { ... } 
Chọn phần tử có link truy cập được (thẻ a có thuộc tinh href, nếu không có href sẽ không được chọn)

:only-child	
p:only-child { ... }
Chọn phần tử (ví dụ <p>) là phần tử con duy nhất của phần tử cha

:first-child	
p:first-child { ... }
Chọn các phần tử (ví dụ <p>) là phần tử con đầu tiên trong phần tử cha của nó.

:first-of-type	
p:first-of-type { ... }
Chọn phần tử (ví dụ <p>) mà nó là phần tử đầu tiên (trong danh sách các phần tử cùng loại, cùng cha - không cần phải là con đầu tiên của cha)

:last-child	
p:last-child { ... }
Chọn phần tử (ví dụ <p>) là phần tử cuối cùng trong phần tử cha của nó

:last-of-type	
p:last-of-type { ... }
Chọn phần tử <p> là phần tử cuối cùng trong phần tử cha

:not(selector)	
:not(p) { ... }
Phủ định của selector, chọn các phần tử không xác định được bởi selector.

:nth-child(n)	
p:nth-child(2) { ... }
n = số nguyên cụ thể: Chọn phần tử theo thứ tự của nó trong phần tử chứa. (Chọn ra mọi phần tử <p> là phần tử thứ 2 trong phần tử cha)

n = even : Chọn các phần tử có thứ tự chẵn

n = odd : Chọn các phần tử có thứ tự lẻ

n = an+b : a, b là số nguyên (ví dụ 2n+1), lúc này n sẽ chạy từ 0 (0, 1, 2 ...) và công thức an + b có giá trị bao nhiêu thì lấy ra phần tử có chỉ số thứ tự từng đó trong phần tử cha. Ví dụ, bạn muốn lấy ra các phần tử (1,4,7, ... cách nhau 3) thì viết :nth-child(3n+1)

:nth-last-child(n)	
p:nth-last-child(2) { ... }
Chọn phần tử theo thứ tự các tập các phần tử cùng loại của nó trong phần tử chứa. Áp dụng đúng công thức n giống :nth-child(n)

29. Lựa chọn theo pseudo-element trong CSS
Để thêm Pseudo Element dùng ký hiệu hai dấu hai chấm :: sau đó là tên (từ khoá). Một số từ khoá Pseudo Element là:

::first-line - chọn dòng text đầu tiên của phần tử
::first-letter - chọn ký tự đầu tiên trong phần tử
::selection - chọn thành phần đang được người dùng chọn (::highlight)
::before - chèn thêm nội dung vào trước phần tử
::after - chèn thêm nội dung vào sau phần tử
::placeholder - chọn placeholder của control

::before và ::after được dùng để lựa chọn, thêm vào phía trước và phía sau một phần tử. 
Thường sử dụng thuộc tính content để thêm nội dung.
.exam2::before {
    display: inline-block;
    height: 30px;
    content: url("https://cdn4.iconfinder.com/data/icons/famous-character-vol-2-flat/48/Avatar_Famous_Characters-20-128.png");
}
.exam2::after {
    content: 'Thêm sau phần tử';
    background: green;
    color: whitesmoke;
    display: inline-block;
    padding: 3px;
}

30. Thuộc tính word-wrap CSS3
word-wrap: normal | break-word;
normal không thay đổi gì
Khi sử dụng word-wrap: break-word, trình duyệt sẽ ngắt từ dài quá sao cho vừa phần tử chứa.

31. Tạo màu opacity:

Vì là tạo ra đối tượng xếp vào loại image, nên có thể thiết lập nó là giá trị cho các thuộc tính cần dùng đến image như: 
background-image, list-style-image, border-image, cursor, content trong ::after và ::before

- Linear Gradient :
linear-gradient(angle/direction, color1, color2, ...)

background-image: linear-gradient(red, blue);             / * Hướng mặc định trên xuống dưới */
background-image: linear-gradient(30deg, red, blue);       / * Hướng mặc định trên xuống dưới */
background-image: linear-gradient(90deg, red, blue);   
background-image: linear-gradient(to top, red, blue);       / *Hướng lên */

Hàm repeating-linear-gradient : nó cố gắng lặp lại nhiều lần hàm linear-gradient
background-image: repeating-linear-gradient(to right, red 0px, blue 40px, red 80px); 

32. opacity
Khi một phần tử thiết lập có độc đục opacity giá trị khác 1, 
thì tất cả ccs phần tử con của nó có cùng độ đục opacity như vậy, không có cách nào thiết lập độ đục khác đi cho phần tử con.

33. Thuộc tính transform và các hàm biến hình box phần tử trong CSS
Sử dụng thuộc tính transform để thực hiện biến đổi box phần tử như dịch chuyển, xoay phần tử, thu phóng phần tử, đẩy nghiêng phần tử với các hàm tương ứng như translate, rotate, scale, skew

- Thuộc tính transform :  biến đổi phần tử trong hệ tọa độ hai hoặc ba chiều.
transform: none | transform-list
Trong đó transform-list là danh sách một hoặc nhiều hàm chuyển đổi liệt kê phía dưới.

- Thuộc tính transform-origin thay đổi gốc tọa độ phần tử
transform-origin: top center;  /* gốc ở giữa cạnh trên */
transform-origin: 100% 30px;   /* gốc ở cạnh phải, cách cạnh trên 30px */
transform-origin: 30px 60px;   /* cách gốc cũ 30px 60px */
transform-origin: center;      /* gốc ở giữa phần tử */

- Hàm rotate có thể làm giá trị cho thuộc tính transform
transform: rotate(angle);
/* angle: góc xoay (10deg, 20deg, -45deg ...) - quanh quanh gốc phần tử */
VD: 
// Gốc ở giữa xoay 45 độ
transform: rotate(45deg); 
// Gốc đổi lên left top xoay 45 độ
transform-origin: left top;
transform: rotate(45deg); 

- Hàm rotateX, rotateY, rotateZ xoay box quanh các trục tương ứng là X, Y, Z. 
transform: rotateX(angle);
transform: rotateY(angle);
transform: rotateZ(angle);

- Hàm rotate3d 
transform: rotate3d(x,y,z,angle);
transform: rotate3d(x,0,0,45deg); /* tương đương quanh quanh trục x 45 độ */

- Hàm translate, translateX, translateY, translateZ, translate3d 
Các hàm translate dùng để dịch chuyển phần tử theo các trục.
transform: translate(x, y? );         /* dịch phần tử khoảng x theo chiều trục X, y theo chiều trục Y*/
transform: translateX(x);             /* dịch phần tử khoảng x theo chiều trục X */
transform: translateY(y);             /* dịch phần tử khoảng y theo chiều trục Y */
transform: translateZ(z);             /* dịch phần tử khoảng z theo chiều trục Z */
transform: translate3d(x, y, z);      /* dịch phần tử khoảng z theo chiều trục Z */

- Hàm skew, skewX, skewY : Xoay cạnh
transform: skew(angleX, angleY);         /* cạnh trái và cạnh phải xoay một góc angleX*/
                                         /* cạnh trên và dưới xoay góc angleY */
transform: skewX(angleX);                /* cạnh trái và cạnh phải xoay một góc angleX*/
transform: skewY(angleY);                /* cạnh trên và dưới xoay góc angleY */

- Hàm scale, scaleX, scaleY : Phóng to, thu nhỏ
transform: scale(numberX, numberY);         /* Thu phóng chiều X với tỷ lệ numberX */
                                            /* Thu phóng chiều Y với tỷ lệ numberY */
transform: scaleX(numberX);                 /* Thu phóng chiều X với tỷ lệ numberX */
transform: scaleY(numberY);                 /* Thu phóng chiều Y với tỷ lệ numberY */

34. Thuộc tính transition
- Thuộc tính transition-property để liệt kê các thuộc tính CSS có thể xảy ra biến đổi liên tục (biến hình) khi thay đổi giá trị 
transition-property: none | all | property1, property2 ...;

- transition-duration để ấn định thời gian diễn ra hiệu ứng
transition-duration: time(s);

VD :
.trans3 {
    transition-property: transform, height, width;
    transition-duration: 2s;
}

.trans3:hover {   
    height: 300px;  
    width: 300px;  
    transform: translateX(200px) rotate(45deg);
}

- Thuộc tính transition-timing-function chỉ ra tốc độ thay đổi khi chuyển đổi
ease bắt đầu chậm, rồi tăng dần (mặc định)
ease-in chậm, tăng dần, dừng đột ngột
ease-out chậm dần đều
ease-in-out giống ease nhưng mịn hơn
linear thay đổi đều đều

- Sử dụng Javascript thay đổi giá trị
<button onclick="changewidth()">Đổi chiều rộng</button>
<div class="trans5">
    Hiệu ứng biến hình
</div>

function changeheight() {
    var e = document.getElementsByClassName('trans5')[0];
    if (e.style.height != '40px')
    {
        e.style.height = "40px";
        e.textContent = 'h=40px';
    }
    else 
    {
        e.style.height = "150px";
        e.textContent = 'h=150px';
    }
        
  }  

- Thuộc tính transition là cách viết ngắn gọn gộp lại của các thuộc tính transition-property, transition-duration, transition-timing-function, transition-delay.
transition: width 1s ease-in-out, background-color 2s ease, font-size 3s linear;

35. Thuộc tính animation hiệu ứng động với quy tắc keyframes trong CSS
Quy tắc @keyframes và thuộc tính animation-name, animation-duration, animation-iteration-count

Quy tắc @keyframes là định nghĩa chu trình hiệu ứng động.
Để khai báo tạo ra một @keyframes, ví dụ tạo ra @keyframes có tên hieu-ung-abc viết cú pháp như sau:
@keyframes hieu-ung-abc {
    from{  // Hoặc 0%

    }
    to{   // Hoặc 100%

    }
}

animation-duration: time;                     /* thời gian như 1s, 2s ... */
animation-iteration-count: infinite | number; /* number = số lần lặp, infinite = vô tận */
animation-name: none | keyframe-name;

VD :
.my-element {
    animation-name: hieu-ung-abc;   /* thiết lập quy tắc hiệu ứng động cho phần tử */
    animation-duration: 3s;         /* thời gian diễn ra 1 chu trính hiệu ứng */
    animation-iteration-count: 1;   /* số lần (số chu trình diễn ra) */
}

@keyframes kf1 {
    from {  /* thời điểm ban đầu của chu trình */
        font-size: 10px;
        color: red;
    }
    to {  /* thời điểm cuối của chu trình */
        font-size: 30px;
        color: green;
    }
}

@keyframes kf2 {
    0% {  
        /* thời điểm ban đầu của chu trình */
        font-size: 10px;
        color: red;
    }
    
    50% {  
        /* thời điểm giữa chu trình */
        font-size: 30px;
        color: green;
    }
    
    to {        
        /* thời điểm cuối của chu trình, có thêm hiệu ứng thay đổi độ dày viền */
        font-size: 40px;   
        border-width: 10px;
    }
}

- Thuộc tính animation-direction chỉ định một hiệu ứng động diễn ra thuận hay ngược chu trình
animation-direction: normal | reverse | alternate | alternate-reverse
normal: chạy từ đầu tới cuối chu trình, đến cuối nếu lặp lại nó sẽ nhảy về đầu chu trình và tiếp tục thực hiện
reverse: chu trình biến đối bị ngược, từ to về from.
alternate: chạy từ đầu đến cuối - nếu lặp lại thì sẽ không nhảy về đầu mà thực hiện từ cuối về đầu.
alternate-reverse: Chạy từ cuối về đầu, nếu lặp lại thì thực hiện từ đầu về cuối ...

- Thuộc tính animation-fill-mode dùng để xác định giá trị mà phần tử sẽ giữ lại sau khi hoàn thành một chuỗi hoạt ảnh.
none: Phần tử sẽ không giữ lại bất kỳ giá trị nào sau khi hoàn thành hoạt ảnh. Nghĩa là, phần tử sẽ trở lại trạng thái ban đầu ngay sau khi hoàn thành chuỗi hoạt ảnh.
forwards: Phần tử sẽ giữ lại giá trị cuối cùng của hoạt ảnh sau khi nó hoàn thành. 
backwards: Phần tử sẽ áp dụng các giá trị của khối khai báo CSS trước khi hoạt ảnh bắt đầu thực hiện. Nó sẽ áp dụng trạng thái ban đầu của hoạt ảnh ngay từ khi nó bắt đầu.
both: Kết hợp cả forwards và backwards. Phần tử sẽ giữ lại giá trị cuối cùng của hoạt ảnh sau khi hoàn thành và áp dụng giá trị trước khi hoạt ảnh bắt đầu.

- Thuộc tính animation-timing-function để thiết lập hàm thời gian, xác định tốc độ biến đổi trong một chu trình
animation-timing-function: timing-function;
ease: tốc độ biến đối tương ứng hàm cubic-bezier(0.25, 0.1, 0.25, 1) (xem Đường cubic-bezier)
linear: tốc độ biến đối đều, tương đương cubic-bezier(0, 0, 1, 1)
ease-in: tương đương cubic-bezier(0.42, 0, 1, 1), ban đầu chậm sau nhanh lên, sau khi nhanh giữ nguyên đến cuối
ease-out: tương đương cubic-bezier(0, 0, 0.58, 1), ban đầu nhanh sau chậm, sau khi chậm giữ nguyên đến cuối
ease-in-out: tương đương cubic-bezier(0.42, 0, 0.58, 1), ban đầu chậm, nhanh ở giữa, sau đó chậm cho đến cuối
cubic-bezier tự thiết lập hàm cubic-bezier(x1,y1, x2, y2) (xem Đường cubic-bezier)

- Thuộc tính animation-play-state
animation-play-state: running | paused

- Thuộc tính animation là cách viết ngắn gọn gộp các thuộc tính animation-* 
animation: [animation-name] [animation-duration] [animation-timing-function]
           [animation-delay] [animation-iteration-count]
           [animation-direction] [animation-fill-mode] [animation-play-state];

/*
.exam3 {
    animation-name: kf2;
    animation-duration:  2s;
    animation-timing-function: ease-in;
    animation-iteration-count:infinite;
    animation-direction: alternate;
} 
*/ 
.exam3 {
    animation: kf2 2s ease-in infinite alternate;
    height: 80px;
} 

36. Sử dụng thuộc tính filter trong CSS
Bằng cách sử dụng filter trên các phần tử - (chủ yếu sử dụng với phần tử ảnh) - giúp chúng ta biến đổi màu sắc và một số hiệu ứng trước khi phần tử đó được hiện thị.
filter: các_hàm_filter
Các hàm filter có thể sử dụng như brightness(), contrast() ... hoặc none để hủy bỏ filter, bạn có thể sử dụng cùng lúc nhiều hàm filter

filter: blur(3px);
filter: brightness(150%);
filter:contrast(200%);
filter: drop-shadow(5px 10px 3px gray);
filter: grayscale(100%);

37. Quy tắc @font-face nạp font mới trong CSS
Nên chọn các font: .ttf (true type font), .otf (OpenType), woff (Web Open Font Format) vì được hỗ trợ từ hầu hết các trình duyệt như Chrome, FireFox, IE ...
@font-face {
  font-family: firstfont;                           /* đặt tên font */
  src: url(myfont.woff);                            /* tải font chữ */
}

VD : 
@font-face {
    font-family: fontvidu;
    src: url("https://cdnjs.cloudflare.com/ajax/libs/hack-font/3.3.0/web/fonts/hack-regular.woff2")
}
.apdungfont {
    font-family: fontvidu;
    font-size: 20px;
}
// Áp dụng font
<p class="apdungfont">Đây là font chữ fontvidu</p>

Hoặc 
@import url('https://fonts.googleapis.com/css2?family=Dancing+Script&display=swap');
.fontds {
    font-family: 'Dancing Script';
    font-size: 50px;
}

38. Sử dụng flexbox bố cục trang trong CSS
display: flex; hoặc display: inline-flex;
https://xuanthulab.net/su-dung-flexbox-bo-cuc-trang-trong-css.html

39. Sử dụng Grid bố cục trang trong CSS
https://xuanthulab.net/su-dung-grid-bo-cuc-trang-trong-css.html
Lưới trong CSS - CSS Grid - là bố hệ thống bố cục hai chiều được sử dụng để xây dựng giao diện website (Trước đây đã biết FlexBox là bố cục một chiều)
grid-template-columns, grid-template-rows, grid-column-start, grid-column-end, grid-row-start, grid-row-end, grid-row-gap, grid-column-gap

/* kích hoạt grid phần tử chứa */
display: grid | inline-grid;

.gridcontainer1 {
    display: grid;                              /* kích hoạt grid container              */
    grid-template-columns: 100px 120px 140px;   /* có ba cột với độ rộng theo tham số    */
    grid-template-rows:    50px  100px 50px;    /* có ba dòng với chiều cao theo tham số */
    
    background: #e91e633d;
}
.item1 {
    /* phần tử con từ đường lưới đứng 2 đến 4 (chiếm cột 2 đến 3) */
    grid-column-start: 2;
    grid-column-end: 4;
    /* phần tử con đường ngang 2 đến 3 (chiếm dòng 2) */
    grid-row-start: 2;
    grid-row-end: 3;
    
    background: #ff5722d1;
}

- Vùng lưới: thuộc tính grid-template-areas và grid-area
 .gridarea-container {
    display: grid;  
    grid-template-columns: 100px 120px 140px; /* ba cột   */
    grid-template-rows:    50px  100px 50px;  /* ba hàng */
    grid-template-areas: "vung1 vung2 vung2"
                            "...   vung2 vung2"
                            "vung3 vung4 vung4"; 
/*
        Lưới trên có ba cột, ba hàng:
        - Các giá trị viết trong chuỗi grid-template-areas, mỗi chuỗi tương
            ứng cho mỗi hàng, trong chuỗi chứa tên vùng, viết như dưới thì:
        - vung1: chiếm ô thuộc dòng 1, cột 1
        - vung2: chiếm ô2 và ô ba dòng 1 và chiếm ô 2 và ô 3 của dòng 2
        - vung3: chiếm ô1 của dòng 3
        - vung4: chiếm ô 2 và 3 của dòng 3
        - Nếu môt ô nào đó không đưa vào vùng thì dùng ký hiệu ...
                                        
*/                             
    background: #e91e633d;
}
.item-vung1 {
    grid-area: vung1;
    background: rgba(54,196,87,0.82);
}
.item-vung2 {
    grid-area: vung2;
    background: #ff5722d1;
}
.item-vung3 {
    grid-area: vung3;
    background: rgba(255,34,192,0.82);
}
.item-vung4 {
    grid-area: vung4;
    background: rgba(34,163,255,0.82);
}
 
</style>

<div class="gridarea-container">
    <div class="item-vung1">Vung1</div>
    <div class="item-vung4">Dung4</div>
    <div class="item-vung3">Dung3</div>
    <div class="item-vung2">Vung2</div>
</div>

- Làn lưới và ô lưới thuộc tính grid-row-gap, grid-column-gap 
.gridcontainer2 {
    display: grid;                               
    grid-template-columns: 100px 120px 140px;   
    grid-template-rows:    50px  100px 50px; 
        
    /* khoảng cách giữa các làn (cột cách nhau 10px dòng 20px)*/  
    grid-row-gap: 20px; 
    grid-column-gap: 10px;
    
    background: #e91e633d;
}

- Đặt tên đường lưới
.gridcontainer3 {
    display: grid;                               
    grid-template-columns: [A]  100px [B]  120px [C] 140px;   
    grid-template-rows:    [R1] 50px  [R2] 100px [R3] 50px;  
    
    background: #e91e633d;
}

.item5 {
    grid-column-start: B;
    grid-column-end: C;        
    grid-row-start: R2;
    grid-row-end: R3;
    
    background: #ff5722d1;
}

40. Quy tắc @media trong CSS với thiết kế responsive
Quy tắc @media cho phép bạn viết một tập hợp các quy tắc CSS nó chỉ có hiệu lực tùy thuộc vào thông số cụ thể của cửa sổ, màn hình ...
Cú pháp:
@media media-types [and media-query-conditions]? {
    /* các đoạn mã CSS */
}'

media-types : Tham số media-types là loại màn hình, nó có thể nhận nhiều giá trị cách nhau bởi dấu phảy ,. Các giá trị như:
all : tất cả các loại thiết bị hiện thị
print : khi ở chế độ xem trước in (print preview)
screen : màn hình màu máy tính

//Không viết như này được : @media screen and (min-width: 400px and max-width: 700px) 
@media screen and (min-width: 400px) and (max-width: 700px)
{
    /* Các CSS khi màn hình từ 400px đến 700px */
}

Chiều rộng của thiết bị với các truy vấn device-width, min-device-width và max-device-width
Chiều cao của thiết bị với các truy vấn device-height, min-device-height và max-device-height

Hướng màn hình với truy vấn orientation
orientation:portrait : màn hình xoay đứng
orientation:landscape : màn hình xoay ngang
@media all and (orientation:landscape)
{
    /* Các CSS khi màn hình xoay ngang */
}
