

1. HTTP protocol
- HyperText Transfer Protocol - Giao thức truyền tải siêu văn bản
172.67.162.2:443
- 172.67.162.2 là địa chỉ IP, 443 là port
- HTTP Request methods, HTTP Response, HTTP Status Code

HTTP Request methods
HTTP Request Method chỉ phương thức để được thực hiện trên nguồn được nhận diện bởi Request-URI đã cung cấp

GET
GET được sử dụng để lấy lại thông tin từ máy chủ đã cung cấp bởi sử dụng một URI đã cung cấp. 
Các yêu cầu sử dụng GET chỉ nhận dữ liệu và không có ảnh hưởng gì tới dữ liệu.

HEAD
Tương tự như GET, nhưng nó truyền tải dòng trạng thái và khu vực header.

POST
Một yêu cầu POST sử dụng các mẫu HTML để gửi dữ liệu tới máy chủ, như thông tin khách hàng, file tải lên,…

PUT
Thay đổi tất cả các đại diện hiện tại của nguồn mục tiêu với nội dung được tải lên.

DELETE
Gỡ bỏ tất cả các đại diện hiện tại của nguồn mục tiêu bởi URI.

CONNECT
Thiết lập một tunnel tới máy chủ được xác định bởi URI đã cung cấp.

OPTIONS
Miêu tả các chức năng giao tiếp cho nguồn mục tiêu.

TRACE
Trình bày một vòng lặp kiểm tra thông báo song song với path tới nguồn mục tiêu.

HTTP Response
header
Trống
Code


HTTP Status Code
Mã trạng thái HTTP được máy chủ phản hồi lại mỗi khi nhận được HTTP Resquest.
Yếu tố Status-Code là một số nguyên 3 ký tự, trong đó ký tự đầu tiên của mã hóa trạng thái định nghĩa hạng (loại) phản hồi và hai ký tự cuối không có bất cứ vai trò phân loại nào. Có 5 giá trị của ký tự đầu tiên như sau:

1xx: Thông tin
Nó nghĩa là yêu cầu đã được nhận và tiến trình đang tiếp tục.

2xx: Thành công
Nó nghĩa là hoạt động đã được nhận, được hiểu, và được chấp nhận một cách thành công.

3xx: Sự điều hướng lại
Nó nghĩa là hoạt động phải được thực hiện để hoàn thành yêu cầu.

4xx: Lỗi Client
Nó nghĩa là yêu cầu chứa cú pháp không chính xác hoặc không được thực hiện

5xx: Lỗi Server
Nó nghĩa là máy chủ thất bại với việc thực hiện một yêu cầu nhìn như có vẻ khả thi.

2. Sever Side rendering (SSR) & Client Side rendering (CSR) 
- Sever Side rendering (SSR) : 
    + Render ở sever dùng cho website muốn tăng thứ hạng tìm kiếm (SEO)
    + Nhanh hơn CSR lần đầu
    + Code ít hơn với dự án nhỏ, ko cần api
- Client Side rendering (CSR) : 
    + Render ở client bằng javascript , ReactJs
    + Chậm hơn lần đầu nhưng nhanh hơn lần sau
    + Code ít hơn với dự án lớn, cần api
- Hoặc kết hợp cả 2

3. Install ExpressJS FramWork
- npm init : Khởi tạo dự án
- npm i express  
 Chạy : node index.js 
-> Chỉ 1 lần được nạp muốn chạy lại phải node index.js 

4. Install Nodemon & inspector
- npm i nodemon -D : Tự động restart khi ứng dụng có sự thay đổi ở các file .js, mjs,json
- Tạo script : "start":"nodemon --inspect index.js",
Chạy npm start, hoặc npdemon --inspect index.js

--inspect : Trình gỡ lỗi của node

5. Cài morgan
- Là middleware của express
- Giúp log ra những Request lên sever
- Cài vào devDepen...
 npm i morgan -D

6. Template engine (handlebars)
- Template engine là công cụ giúp viết mã html dễ hơn
- Có nhiều loại Template engine nữa hay như : pug 
- Cìa handlebars : npm i express-handlebars

Directory Structure:
.
├── app.js
└── views
    ├── home.handlebars
    └── layouts
        └── main.handlebars

2 directories, 3 files

7.Static file & SCSS
// Xử lí static file Set đường dẫn ảnh
app.use(express.static(path.join(__dirname,'public')))

SCSS :
npm i node-sass -D

8.Use Bootstrap
- Phần đầu :
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
- Phần cuối trước /body
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
- thuộc tính async, defer của thẻ script
+ async : khi quá trình parse html gặp phải script này, nó sẽ vẫn tiếp tục parse html cho đến khi script này được download xong, 
thì quá trình parse html mới tạm dừng để execute những code script này, sau đó lại tiếp tiếp quá trình parse html
+ defer : quá trình parse html sẽ không bị dừng lại mà parse cho đến khi hoàn thành, quá trình download các script file được tiến hành song song, và cuối cùng thì sẽ execute những script code này khi html đã parse xong.

9. Basic routing
VD:
app.get('/', (req, res) => {
  res.render('home');
})

app.METHOD(PATH, HANDLER)
- Method là phương thức : get, set ... viết thường
- Path là đường dẫn
- HANDLER là callback function hàm xử lí 
    VD: (req, res) => {
  res.render('home');
}
+ req : Request , res : Response

10. Get Method & Querry Parameters
- Mặc định phương thức là GET
http://localhost:3000/search?q=lap%20trinh&hiep=deptrai

app.get('/search', (req, res) => {
  res.render('search');
})

Req là obj có thuộc tính query là obj chứa các Parameters 
req : {
    query: {q: 'lap trinh', hiep: 'deptrai'},
    ...
}
Lấy req.query

11. Form default behavior
- Thuộc tính name trong thẻ input là req.query.name
- Mặc định form method="GET" và action chính nó

- GET: Dùng để yêu cầu dữ liệu từ máy chủ, dữ liệu thường xuất hiện trên URL.
- POST: Dùng để gửi dữ liệu lên máy chủ, dữ liệu thường được gửi trong phần thân của yêu cầu.
- GET và POST là hai phương thức của giao thức HTTP, đều là gửi dữ liệu về server xử lí sau khi người dùng nhập thông tin vào form và thực hiện submit.
- Khi lấy dữ liệu nên dùng GET để truy xuất và xử lí nhanh hơn.
Khi tạo dữ liệu nên dùng POST để bảo mật dữ liệu hơn. 
Một ví dụ cụ thể như trong trường hợp bạn cần tạo một form để người dùng upload avatar hay video thì chúng ta thường sẽ sử dụng phương thức POST. Tuy nhiên khi tải về avatar hoặc video thì bạn lại nên sử dụng phương thức GET. Ngoài ra khi cần xử lý các thông tin nhạy cảm ví dụ như email, password thì bạn cần sử dụng POST thay vì GET.

12. POST method
- Get dữ liệu đính dữ liệu trên url, post 
- Get là req.query,
- Post req.body Cần 
app.use(express.urlencoded({
    extended : true
}))
app.use(express.json())

13. Mô hình MVC 
- MVC : Model view controller

14. [MVC] Routes & Controllers
- Cách export import module
module.exports = new NewsController

const NewsController = require('./NewsController');

15. MongoDB
localhost = 127.0.0.1

16. Cài (Bỏ qua)
npm i prettier lint-staged husky -D
npm uninstall prettier lint-staged husky 
- h không cần do đã có extension

17. MongoDB
- MongoDB là cơ sở dữ liệu kiểu doccument khác cơ sở dữ liệu quan hệ tạo bảng
- npm i mongoose
- mongoose thư viện trung gian giúp quản lí MongoDB hiệu quả hơn qua nodejs

18. [MVC] Model
- scheme : Lược đồ
- MVC là xử lí trên sever
- M : Model ( Databasse)
- V : View ( handlebars )
- C : Controllers ( Điều khiển)
- Từ conttrol -> model -> view -> conttrol

19.Lấy dữ liệu từ data base :
// Trong file models
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const Course = new Schema({
    name: { type: String, maxLength: 255 },
    description: { type: String, maxLength: 600 },
    image: { type: String, maxLength: 255 },
    createAt: { type: Date, default: Date.now },
    updateAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Course', Course);


// Trong file Site conttrol
const Course = require('../models/Course');

class SiteController {
    // [GET] /
    async index(req, res, next) {
        await Course.find({})
            .then((courses) =>
                res.render('home', {
                    tiltle: 'test tittle',
                }),
            )
            .catch((error) => next(error));
    }

    // [GET] /search
    search(req, res) {
        res.render('search');
    }
}

module.exports = new SiteController();

// Cách truyền dữ liệu xuống hbs :
res.render('home', {
    tiltle: 'test tittle',
    courses : courses
}),

Hoặc res.render('home', {courses}),

//nhận
<h1>{{tiltle}}</h1>

20.[CRUD] Tạo file util trong src
- Trong file util dùng để tạo công cụ sửa code
- Tạo file mongoose.js dùng để sửa vẫn đề gặp phải khi dùng hbs không cho dùng this ( Trong file home.hbs)
- CRUD 4 hành động tương tác với database : Create, Read, Update, Delete

21. Course detail page

(req, res){
    Truyền qua địa chỉ :
        req.query.name 
    Truyền qua POST :
        req.body.name
    Truyền qua :slug :
        req.params.slug
}